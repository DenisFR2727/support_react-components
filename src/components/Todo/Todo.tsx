import { useState } from "react";
import "./todo.css";
interface ITasks {
  id: number;
  text: string;
  isCompleted: boolean;
}

const initialTasks: ITasks[] = [
  { id: 1, text: "Buy milk", isCompleted: false },
  { id: 2, text: "Walk the dog", isCompleted: true },
  { id: 3, text: "Read a book", isCompleted: false },
];

export default function TodoList() {
  const [tasks, setTasks] = useState<ITasks[]>(initialTasks);
  const [filter, setFilter] = useState<"all" | "active" | "completed">("all");

  const toggleStatus = (taskId: number) => {
    const updateStatus = tasks.map((task) =>
      task.id === taskId ? { ...task, isCompleted: !task.isCompleted } : task
    );
    setTasks(updateStatus);
  };

  const filteredTask = tasks.filter((task) => {
    if (filter === "active") return !task.isCompleted;
    if (filter === "completed") return task.isCompleted;
    return true;
  });

  const noTasks = filteredTask.length === 0;

  return (
    <div className="todo_list">
      <h1>Task 2</h1>
      <div className="filters_ btn">
        <button onClick={() => setFilter("all")}>All</button>
        <button onClick={() => setFilter("active")}>Active</button>
        <button onClick={() => setFilter("completed")}>Completed</button>
      </div>
      {noTasks ? (
        <p>No Tasks!</p>
      ) : (
        <ul>
          {filteredTask.map((task) => (
            <li key={task.id}>
              <input
                type="checkbox"
                checked={task.isCompleted}
                onChange={() => toggleStatus(task.id)}
              />
              <span className={task.isCompleted ? "isCompleted" : ""}>
                {task.text}
              </span>
              <button onClick={() => toggleStatus(task.id)}>
                Toggle Status
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

// üß© –ó–∞–≤–¥–∞–Ω–Ω—è #6: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
// üî∏ –£–º–æ–≤–∞:

// –°—Ç–≤–æ—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —è–∫–∏–π:

//     –ú–∞—î —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (id, text, isCompleted)

//     –ü–æ–∫–∞–∑—É—î –∑–∞–¥–∞—á—ñ —É —Å–ø–∏—Å–∫—É

//     –ú–∞—î 3 –∫–Ω–æ–ø–∫–∏-—Ñ—ñ–ª—å—Ç—Ä–∏:

//         All

//         Active ‚Äî –ø–æ–∫–∞–∑—É—î –ª–∏—à–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ

//         Completed ‚Äî –ø–æ–∫–∞–∑—É—î –ª–∏—à–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ

//     –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–º—ñ–Ω—é—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ñ—ñ–ª—å—Ç—Ä–∞

//     –ê–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –º–∞—î –±—É—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–æ –≤–∏–¥—ñ–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–ª—å–æ—Ä–æ–º –∞–±–æ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è–º)

// üìå –û–±–º–µ–∂–µ–Ω–Ω—è:

//     –î–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ —á–∏ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Äî –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ

//     –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∂–µ —î —É –º–∞—Å–∏–≤—ñ

//     –†–æ–±–∏—Ç–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
