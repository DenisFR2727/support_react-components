import { useMemo, useState } from "react";

interface ProductsProps {
  id: number;
  name: string;
  category: string;
  price: number;
}

export default function ProductFilter({
  products,
}: {
  products: ProductsProps[];
}) {
  const [categoryValue, setCategoryValue] = useState<string>("All");
  const [maxPrice, setMaxPrice] = useState<number | null>(null);
  const categorys = ["All", "Electronics", "Furniture", "Clothing"];

  const changeValueCategory = (e: React.ChangeEvent<HTMLSelectElement>) => {
    e.preventDefault();
    setCategoryValue(e.target.value);
  };
  const filteredProducts = useMemo(() => {
    let filtered = [...products];

    switch (categoryValue) {
      case "Electronics":
      case "Furniture":
      case "Clothing":
        filtered = filtered.filter((prod) => prod.category === categoryValue);
        break;
      case "All":
      default:
        break;
    }

    if (maxPrice !== null) {
      filtered = filtered.filter((prod) => prod.price <= maxPrice);
    }

    return filtered;
  }, [maxPrice, products, categoryValue]);

  return (
    <div>
      <select
        name=""
        id=""
        value={categoryValue}
        onChange={changeValueCategory}
      >
        {categorys.map((category, index) => (
          <option key={index} value={category}>
            {category}
          </option>
        ))}
      </select>
      <input
        type="number"
        onChange={(e) => setMaxPrice(e.target.value ? +e.target.value : null)}
      />
      <div className="products">
        <ul>
          {filteredProducts.map((product) => (
            <li key={product.id} style={{ display: "flex", gap: "50px" }}>
              <p style={{ width: "100px" }}>{product.name}</p>
              <p>{product.price}$</p>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

//  –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏:

//     –í–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ (select) –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:

//         –ó–Ω–∞—á–µ–Ω–Ω—è: All, Electronics, Furniture, Clothing

//     –Ü–Ω–ø—É—Ç –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏.

//     –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —Ü—ñ–Ω–∏.

// üîß –õ–æ–≥—ñ–∫–∞:

//     –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "All" ‚Üí —Ñ—ñ–ª—å—Ç—Ä—É–π —Ç—ñ–ª—å–∫–∏ –∑–∞ —Ü—ñ–Ω–æ—é.

//     –Ø–∫—â–æ –∑–∞–¥–∞–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ ‚Üí –ø–æ–∫–∞–∑—É–π —Ç—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä–∏ –∑ —Ü—ñ–Ω–æ—é ‚â§ maxPrice.

//     –Ø–∫—â–æ –ø–æ–ª–µ —Ü—ñ–Ω–∏ –ø—É—Å—Ç–µ ‚Üí –ø–æ–∫–∞–∑—É–π —É—Å—ñ —Ç–æ–≤–∞—Ä–∏ (–∞–±–æ —Ç—ñ–ª—å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—â–æ –æ–±—Ä–∞–Ω–æ –Ω–µ "All").

// üß† –ü–æ—Ä–∞–¥–∏:

//     –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π useState –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è selectedCategory —Ç–∞ maxPrice.

//     –ú–æ–∂–µ—à –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ filteredProducts –ø—Ä—è–º–æ –≤ —Ç—ñ–ª—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–±–æ –≤ useMemo.
