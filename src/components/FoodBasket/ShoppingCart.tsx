import { useState } from 'react';
import './ShoppingCart.css';

interface IProducts {
    id: number;
    name: string;
    price: number;
    quantity: number;
}

const initialProducts: IProducts[] = [
    { id: 1, name: 'Apple', price: 10, quantity: 1 },
    { id: 2, name: 'Banana', price: 5, quantity: 3 },
    { id: 3, name: 'Orange', price: 8, quantity: 2 },
];

export default function ShoppingCart() {
    const [products, setProducts] = useState<IProducts[]>(initialProducts);
    const totalSum = products.reduce(
        (acc, next) => acc + next.price * next.quantity,
        0
    );

    const decrement = (productId: number) => {
        const updateCountDecrement = products.map((product) =>
            product.id === productId && product.quantity > 1
                ? { ...product, quantity: product.quantity - 1 }
                : product
        );
        setProducts(updateCountDecrement);
    };
    const increment = (productId: number) => {
        const updatedProducts = products.map((product) =>
            product.id === productId
                ? {
                      ...product,

                      quantity: product.quantity + 1,
                  }
                : product
        );
        setProducts(updatedProducts);
    };

    return (
        <div className="list">
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id} className="product">
                        <p className="name">
                            <span>Name</span> {product.name}
                        </p>
                        <div className="product-price">
                            <span>Price</span>
                            <span>{product.price * product.quantity}</span>
                        </div>
                        <div>
                            <span>Quantity</span>
                            <div className="quantity">
                                <button onClick={() => decrement(product.id)}>
                                    -
                                </button>
                                <span>{product.quantity}</span>
                                <button onClick={() => increment(product.id)}>
                                    +
                                </button>
                            </div>
                        </div>
                    </li>
                ))}
                <div>Total: {totalSum}</div>
            </ul>
        </div>
    );
}

// –ó–∞–≤–¥–∞–Ω–Ω—è #7: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ö–æ—à–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
// üî∏ –£–º–æ–≤–∞:

// –°—Ç–≤–æ—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ShoppingCart, —è–∫–∏–π:

//     –ú–∞—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ —Ç–∞–∫–∏–º–∏ –ø–æ–ª—è–º–∏:

//         id (number)

//         name (string)

//         price (number)

//         quantity (number)

//     –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ —Å–ø–∏—Å–∫—É:

//         –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É

//         –¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é

//         –ö—ñ–ª—å–∫—ñ—Å—Ç—å

//         –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ —Ç–æ–≤–∞—Ä—É (—Ü—ñ–Ω–∞ √ó –∫—ñ–ª—å–∫—ñ—Å—Ç—å)

//     –í–Ω–∏–∑—É –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤.

//     –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –∫–Ω–æ–ø–∫–∞–º–∏ "+" —ñ "‚àí".

// üìå –û–±–º–µ–∂–µ–Ω–Ω—è:

//     –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏.

//     –ù–µ –¥–æ–ø—É—Å–∫–∞–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å < 1.

//     –£—Å–µ –≤ –æ–¥–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ.

//     –¢–∏–ø—ñ–∑–∞—Ü—ñ—è ‚Äî –æ–±–æ–≤'—è–∑–∫–æ–≤–æ (interface Product —Ç–æ—â–æ).

//     –î–æ–¥–∞—Ç–∫–æ–≤–æ: –º–æ–∂–Ω–∞ —Å—Ç–∏–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–ª—å–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∏ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±—ñ–ª—å—à–µ 5.

// üìã –ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö:

// –¶–µ —á—É–¥–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞:

//     —Å—Ç–∞–Ω (useState)

//     –º–∞–ø—ñ–Ω–≥ –º–∞—Å–∏–≤—É

//     –æ–±—Ä–æ–±–∫—É –ø–æ–¥—ñ–π

//     –æ–±—á–∏—Å–ª–µ–Ω–Ω—è total —Å—É–º–∏

//     —Ç–∏–ø—ñ–∑–∞—Ü—ñ—é
